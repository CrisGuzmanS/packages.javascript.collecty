{"version":3,"sources":["../src/index.ts","../src/Iterable.ts","../src/Collection.ts"],"sourcesContent":["import Collection from './Collection'\n\nexport default Collection","export default class Iterable {\n  public items;\n  public index = -1;\n\n  constructor(items: any[]) {\n    this.items = items;\n  }\n\n  public [Symbol.iterator]() {\n    let index = -1;\n    const data = this.items;\n\n    return {\n      next: () => ({\n        value: this.item(data[++index]),\n        done: !(index in data),\n      }),\n    };\n  }\n\n  item(item: any) {\n    return item;\n  }\n}\n","import Iterable from './Iterable';\n\nexport default class Collection extends Iterable {\n\n  /**\n   * clones the `collection`\n   * \n   * const collection = new Collection([1,2,3])\n   * const newCollection = collection.clone() // newCollection has the same items than collection\n   */\n  public clone(): Collection {\n    return Object.assign(Object.create(Object.getPrototypeOf(this)), this)\n  }\n\n  /**\n   * concacts the given array to the `collection`\n   * \n   * ```js\n   * const collection = new Collection([1,2,3])\n   * \n   * collection.concat([4,5,6])\n   * \n   * console.log(collection.toArray())\n   * // output\n   * > [1, 2, 3, 4, 5, 6]\n   * ```\n   */\n  public concat(array: any[]): void {\n    this.items = this.items.concat(array)\n  }\n\n  /**\n   * \n   */\n  public contains(callback: (item: any) => boolean): boolean {\n\n    for (const item of this) {\n      if (callback(item)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * gets total items in the `collection`\n   * \n   * ```js\n   * const collection = new Collection([1,2,3]);\n   * \n   * console.log(\"total\", collection.count())\n   * \n   * // output\n   * > total 3\n   * ```\n   */\n  public count(): number {\n    return this.items.length;\n  }\n\n  /**\n   * returns a new `collection` with the `items` that match with the callback given\n   * \n   * ```js\n   * let collection = new Collection([1, 2, 3])\n   *\n   * let newCollection = collection.filter((item: number) => {\n   *    return item <= 2\n   * })\n   * \n   * console.log(newCollection.toArray())\n   * // output\n   * > [1,2]\n   * ```\n   */\n  public filter(callback: (item: any) => any): Collection {\n    const newItems = []\n\n    for (const [index, element] of this.items.entries()) {\n      const currentItem = this.item(this.items[index])\n\n      if (callback(currentItem)) {\n        newItems.push(this.items[index])\n      }\n    }\n\n    const clone = this.clone()\n\n    clone.items = newItems\n\n    return clone\n  }\n\n  /**\n   * gets the first item in the `collection`\n   * \n   * ```js\n   * const collection = new Collection([1,2,3])\n   * console.log(\"first element\", collection.first())\n   * // > first element 1\n   * ```\n   */\n  public first(): any {\n    return this.item(this.items[0]);\n  }\n\n  /**\n   * returns the first `item` that matches the given callback\n   * \n   * ```js\n   * let persons = new PersonCollection([{\n   *         'name': 'rix'\n   *  }, {\n   *      'name': 'roger'\n   *  }])\n   * \n   *  const person = persons.firstWhere((person: Person) => {\n   *      return person.name() == \"roger\"\n   *  })\n   * \n   * // output\n   * > Person { item { name: \"roger\" } }\n   * ```\n   */\n  public firstWhere(callback: (item: any) => any): any | null {\n\n    for (const item of this) {\n      if (callback(item)) {\n        return item\n      }\n    }\n    return null\n  }\n\n  /**\n   * creates a new collection from an array (does the same than new Collection(...))\n   * \n   * const collection = Collection.fromArray([1,2,3])\n   */\n  public static fromArray(array: any[]): Collection {\n    return new this(array)\n  }\n\n  /**\n   * creates a new `collection` from a json\n   * \n   * ```js\n   * collection = Collection.fromJson(\"[1,2,3]\")\n   * ```\n   */\n  public static fromJson(json: string): Collection {\n    return new this(JSON.parse(json))\n  }\n\n  /**\n   * gets the item acording to the given index\n   * \n   * ```js\n   * const collection = new Collection([1, 2, 3])\n   * console.log(collection.get(1))\n   *  \n   *  \\\\ output\n   * > 2\n   * ```\n   */\n  public get(index: number): any {\n    return this.item(this.items[index])\n  }\n\n  /**\n   * checks if the `collection` is empty\n   * \n   * ```js\n   * const collection = new Collection([1,2,3])\n   * console.log(collection.isEmpty())\n   * \n   * // output\n   * > false\n   * ```\n   * \n   * ```js\n   * const collection = new Collection([])\n   * console.log(collection.isEmpty())\n   * \n   * // output\n   * > true\n   * ```\n   */\n  public isEmpty(): boolean {\n    return !this.items.length\n  }\n\n  /**\n   * returns a `collection` with the data mapped for each element\n   *\n   * ```js \n   * let persons = new PersonCollection([{\n   *  'name': 'rix'\n   * }, {\n   *  'name': 'roger'\n   * }])\n   *\n   * const names = persons.map((person: Person) => {\n   *  return person.name()\n   * })\n   * ```\n   */\n  public map(callback: (item: any) => any): Collection {\n    return new Collection(this.items.map(itemElement => callback(this.item(itemElement))))\n  }\n\n  /**\n   * returns the last `item` and removes it from the `collection`\n   * \n   * ```js\n   * let collection = new Collection([1,2,3])\n   * \n   * console.log(collection.pop())\n   * // output\n   * > 3\n   * \n   * console.log(collection.torray())\n   * // output\n   * > [1,2]\n   * ```\n   */\n  public pop(): any {\n    return this.item(this.items.pop())\n  }\n\n  /**\n   * push new `item` to the `collection`\n   * \n   * ```js\n   * let collection = new Collection([1,2,3])\n   * \n   * collection.push(4)\n   * \n   * collection.toArray()\n   * \n   * // output\n   * > [1,2,3,4]\n   * ```\n   */\n  public push(element: any): void {\n    this.items.push(element)\n  }\n\n  /**\n   * gets a random item\n   * \n   * ```js\n   * collection = new Collection([1,2,3])\n   * \n   * console.log(collection.random())\n   * //output\n   * > 3 (obtained randomly)\n   * ```\n   * \n   */\n  public random(): any {\n    const index = Math.floor(Math.random() * this.items.length);\n    return this.item(this.items[index]);\n  }\n\n  /**\n   * Transforms the `collection` to a javascript native array\n   * \n   * ```js\n   * collection = new Collection([1,2,3])\n   * \n   * console.log(collection.toArray())\n   * \n   * // output\n   * > [1,2,3]\n   * ```\n   */\n  public toArray(): any[] {\n    return this.items\n  }\n}"],"mappings":"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","names":[]}